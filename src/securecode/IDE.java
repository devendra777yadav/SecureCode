/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * IDE.java
 *

 */
package jcodeguard;

import java.awt.Toolkit;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.text.SimpleDateFormat;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import jcodeguard.alpha.DBOperations;

import jcodeguard.alpha.ProgramAccessMasterBean;
import jcodeguard.alpha.ProgramMasterBean;
import jcodeguard.alpha.ProgramUpdateMasterBean;
import jcodeguard.encrypto.EncryptionManager;

/**
 *
 *  
 */

public class IDE extends javax.swing.JFrame implements WindowListener {

    JFileChooser jfilechooser;
//This is user to store the program opened and to check if the program has been changed or not before closing it
    String strOldProgram;
    String classPaths = "";
//
    String completeCipherTextProgramPath;
    String completeClearTextProgramPath;
    String clearTextFileName;
   // String clearTextFolderPath = "/home/admin/ide/"; //Linux
    String clearTextFolderPath = "D:\\ide"+File.separator; //windows
    EncryptionManager objEncryptionManager = null;
    int loggedInUserId;
    int currentProgramId;
    //String fileChooserPath="/home/admin/";
    String fileChooserPath="D:\\";            //windows

    /** Creates new form IDE */
    
    public IDE(){}
    public IDE(int loggedInUserId ) {
        initComponents();
         addWindowListener(this);
        this.loggedInUserId = loggedInUserId;
        currentProgramId = 0;
        strOldProgram = "";
        completeCipherTextProgramPath = "";
        completeClearTextProgramPath = "";
        File fileClearTextFolderPath = new File(clearTextFolderPath);

        if (fileClearTextFolderPath.isDirectory()) {
            File files[] = fileClearTextFolderPath.listFiles();
            for (int i = 0; i < files.length; i++) {
                files[i].delete();
            }
        } else {
            fileClearTextFolderPath.mkdirs();
        }
        clearTextFileName = "";
        //jfilechooser = new JFileChooser("C:\\"); //Windows
        jfilechooser = new JFileChooser(fileChooserPath); //Linux
        objEncryptionManager = new EncryptionManager();
        setSize(Toolkit.getDefaultToolkit().getScreenSize());

        //setResizable(false);
        setTitle("Untitled");

        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        splitPane.setDividerLocation(500);
        splitPane.setOneTouchExpandable(true);
         
        setVisible(true);


    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        splitPane = new javax.swing.JSplitPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        taProgramArea = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        taOutput = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        menuFile = new javax.swing.JMenu();
        miNew = new javax.swing.JMenuItem();
        miOpen = new javax.swing.JMenuItem();
        miSave = new javax.swing.JMenuItem();
        miSaveAs = new javax.swing.JMenuItem();
        miExit = new javax.swing.JMenuItem();
        menuExecute = new javax.swing.JMenu();
        miCompile = new javax.swing.JMenuItem();
        miRun = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        splitPane.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        taProgramArea.setColumns(20);
        taProgramArea.setRows(5);
        jScrollPane1.setViewportView(taProgramArea);

        splitPane.setTopComponent(jScrollPane1);

        taOutput.setColumns(20);
        taOutput.setRows(5);
        jScrollPane2.setViewportView(taOutput);

        splitPane.setRightComponent(jScrollPane2);

        menuFile.setText("File");
        menuFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuFileActionPerformed(evt);
            }
        });

        miNew.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        miNew.setText("New");
        miNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miNewActionPerformed(evt);
            }
        });
        menuFile.add(miNew);

        miOpen.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        miOpen.setText("Open");
        miOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miOpenActionPerformed(evt);
            }
        });
        menuFile.add(miOpen);

        miSave.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        miSave.setText("Save");
        miSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miSaveActionPerformed(evt);
            }
        });
        menuFile.add(miSave);

        miSaveAs.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.ALT_MASK));
        miSaveAs.setText("Save As");
        miSaveAs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miSaveAsActionPerformed(evt);
            }
        });
        menuFile.add(miSaveAs);

        miExit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        miExit.setText("Exit");
        miExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miExitActionPerformed(evt);
            }
        });
        menuFile.add(miExit);

        jMenuBar1.add(menuFile);

        menuExecute.setText("Execute");

        miCompile.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F5, 0));
        miCompile.setText("Compile");
        miCompile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miCompileActionPerformed(evt);
            }
        });
        menuExecute.add(miCompile);

        miRun.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F9, 0));
        miRun.setText("Run");
        miRun.setEnabled(false);
        miRun.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miRunActionPerformed(evt);
            }
        });
        menuExecute.add(miRun);

        jMenuBar1.add(menuExecute);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(splitPane, javax.swing.GroupLayout.DEFAULT_SIZE, 948, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(splitPane, javax.swing.GroupLayout.DEFAULT_SIZE, 511, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void menuFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuFileActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_menuFileActionPerformed

    private void miNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miNewActionPerformed
        taProgramArea.setEditable(true);
        miSave.setEnabled(true);
        miSaveAs.setEnabled(true);
        if (getTitle().equals("Untitled")) {
            if (taProgramArea.getText().equals("")) {
taOutput.setText(" ");
  miRun.setEnabled(false);
            } else {
                int i = JOptionPane.showConfirmDialog(this, "File Not Saved-Save Now??", "Confirm", JOptionPane.YES_NO_CANCEL_OPTION);

                switch (i) {
                    case 0:		//yes
                        saveAs();
                        taProgramArea.setText("");
                        setTitle("Untitled");
                        break;

                    case 1:		//no
                        taProgramArea.setText("");
                        break;

                    case 2: 		//cancel
                }
            }
        } else {
            if (strOldProgram.equals(taProgramArea.getText())) {
                taProgramArea.setText("");
                taOutput.setText("");
                setTitle("Untitled");
            } else {
                int i = JOptionPane.showConfirmDialog(this, "File Not Saved-Save Now??", "Confirm", JOptionPane.YES_NO_CANCEL_OPTION);
                switch (i) {
                    case 0:
                        save();
                        taProgramArea.setText("");
                        taOutput.setText("");
                        setTitle("Untitled");
                        break;

                    case 1:
                        taProgramArea.setText("");
                        taOutput.setText("");
                        setTitle("Untitled");
                        break;

                    case 2:
                }
            }
        }
        deleteTempFile();
    }//GEN-LAST:event_miNewActionPerformed

    private void miOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miOpenActionPerformed
        // TODO add your handling code here:
        
        if (getTitle().equals("Untitled")) {
            if (taProgramArea.getText().equals("")) {
                
                openFile();
                
            } else {
                int i = JOptionPane.showConfirmDialog(this, "File Not Saved-Save Now??", "Confirm", JOptionPane.YES_NO_CANCEL_OPTION);

                switch (i) {
                    case 0:
                        saveAs();
                        openFile();
                     
                        break;

                    case 1:
                        openFile();
                        
                        break;

                    case 2:
                }
            }
        } else {
            if (strOldProgram.equals(taProgramArea.getText())) {
                openFile();
            } else {
                int i = JOptionPane.showConfirmDialog(this, "File Not Saved-Save Now??", "Confirm", JOptionPane.YES_NO_CANCEL_OPTION);
                switch (i) {
                    case 0:
                        save();
                        openFile();
                               //chng
              taOutput.setText(" ");
            

                        break;

                    case 1:
                        openFile();
                      taOutput.setText(" ");
                        break;

                    case 2:
                }
            }

        }
    }//GEN-LAST:event_miOpenActionPerformed

    private void miSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miSaveActionPerformed
        // TODO add your handling code here:
        if (getTitle().equals("Untitled")) {
            saveAs();
        } else {
            save();
        }
    }//GEN-LAST:event_miSaveActionPerformed

    private void miSaveAsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miSaveAsActionPerformed
        // TODO add your handling code here:
        saveAs();
}//GEN-LAST:event_miSaveAsActionPerformed

    private void miExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miExitActionPerformed
        // TODO add your handling code here:
        if (getTitle().equals("Untitled")) {
            if (taProgramArea.getText().equals("")) {
                deleteTempFile();
               logout();
            } else {
                int i = JOptionPane.showConfirmDialog(this, "File Not Saved-Save Now??", "Confirm", JOptionPane.YES_NO_CANCEL_OPTION);

                switch (i) {
                    case 0:
                        saveAs();
                       deleteTempFile();
                        logout();
                        
                        break;

                    case 1:
                        deleteTempFile();
                        logout();
                        break;

                    case 2:
                }
            }
        } else {
            if (strOldProgram.equals(taProgramArea.getText())) {
             //chnge     
                //deleteTempFile();
                logout();
            } else {
                int i = JOptionPane.showConfirmDialog(this, "File Not Saved-Save Now??", "Confirm", JOptionPane.YES_NO_CANCEL_OPTION);
                switch (i) {
                    case 0:
                        save();
                        deleteTempFile();
                       logout();
                        break;

                    case 1:
                        deleteTempFile();
                         logout();
                        break;

                    case 2:
                }
            }

        }
    //    deleteTempFile();
    }//GEN-LAST:event_miExitActionPerformed

    private void miCompileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miCompileActionPerformed
        // TODO add your handling code here:
        if (getTitle().equals("Untitled"))
            {
                taOutput.setText("Please choose a file or Write the new one");
            }
        else
        {
        try {
            //get path of file selected including filename

             int path = completeClearTextProgramPath.lastIndexOf(File.separator);

            //get Classpath
            String cpath = completeClearTextProgramPath.substring(0, path);
         //   System.out.println("cpath=="+cpath);

            //make command for compilation
            String command = "javac -classpath " + cpath + " " + completeClearTextProgramPath;

            //System.out.println(command);

            Runtime rt = Runtime.getRuntime();
            Process p = rt.exec(command);

            // Get Errors occoured in compilation and show in Textarea taOutput
            InputStream errstr = p.getErrorStream();
            BufferedReader br = new BufferedReader(new InputStreamReader(errstr));
            String line;
            String errormsg = "";
            
            
  
            while ((line = br.readLine()) != null) {
                errormsg += line + "\n";
            }
            if (!errormsg.equals("")) {
                taOutput.setText(errormsg);
            } else {

                taOutput.setText("Compliled Successfully");
            miRun.setEnabled(true);
            }
        } catch (Exception e) {

            taOutput.setText("Error in Compilation\n" + e);
        }
    }//GEN-LAST:event_miCompileActionPerformed
    }
    private void miRunActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miRunActionPerformed
        // TODO add your handling code here:

                if (getTitle().equals("Untitled"))
            {
                taOutput.setText("Please choose a file or Write the new one");
            }
        else
        {

        try {
            taOutput.setText("");
            //get path of file selected including filename
            //String completeCipherTextProgramPath=String.valueOf(jfilechooser.getSelectedFile().getAbsolutePath());

            //get index of last /   and . so that we set classpath and  get name of class file without extension
           
            int path = completeClearTextProgramPath.lastIndexOf(File.separator);
            int name = completeClearTextProgramPath.lastIndexOf(".");

            String cpath = completeClearTextProgramPath.substring(0, path);

            //make command for compilation
            String command = "java -classpath "+  cpath + " "+ completeClearTextProgramPath.substring(path + 1, name);
            //command="java -classpath "+cpath+";C:\\Java\\jdk1.6.0_03\\jre\\lib\\ext\\mysql-connector-java-3.1.12-bin.jar "+str.substring(path+1,name);
            System.out.println(command);
            Runtime rt = Runtime.getRuntime();
            Process p = rt.exec(command);

            // thread to get errors during runtime
            Thread t = new Thread(new ErrorHandler(p.getErrorStream(), this));

            // thread to get output during runtime
            Thread t1 = new Thread(new InputHandler(p.getInputStream(), this));
            t.start();
            t1.start();

        } catch (Exception e) {
            System.out.println("Exception in mi_run(during interpretation) " + e);
        }
    }//GEN-LAST:event_miRunActionPerformed
    }
    void save() {
        //get file name with path
        boolean saveFlag = true;
        File file = jfilechooser.getSelectedFile();

        if (file == null) {
            return;
        }

        completeCipherTextProgramPath = jfilechooser.getSelectedFile().getAbsolutePath();
        FileWriter writer = null;
        try {
            // write to file the data in text area
            writer = new FileWriter(completeClearTextProgramPath);
            taProgramArea.write(writer);

            writer.close();

            //Encrypting the source code and saving to the path as specified by the user
            objEncryptionManager.encryptSource(completeClearTextProgramPath, completeCipherTextProgramPath);


            //set strOldProgram wit current data
            strOldProgram = taProgramArea.getText();
        } catch (IOException e) {
            System.out.println("save=="+e);
            saveFlag = false;
            JOptionPane.showMessageDialog(this, e.toString(), "File Not Saved", JOptionPane.ERROR_MESSAGE);
        } finally {
            if (writer != null) {
                try {
                    //close writor object
                    writer.close();
                } catch (IOException ie) {
                }
            }
        }
        if (saveFlag) {
            //Insert record of the updated file into the database
            // WhenEver a File is Saved by Using save only
            ProgramUpdateMasterBean objBean = new ProgramUpdateMasterBean();
            objBean.setProgram_ID(currentProgramId);
            objBean.setUpdate_Date(generateCurrentTime());

            DBOperations objDB = new DBOperations();
            objDB.insertUpdateProgramDetail(objBean);
        }

    }

    void saveAs() {
        //open save dialog to save a file
        boolean saveFlag = true;
    int state =jfilechooser.showSaveDialog(this);
         if(state==JFileChooser.APPROVE_OPTION)
         {
        //GET FILE NAME WITH PATH
        File file = jfilechooser.getSelectedFile();
        if (file == null) {
            return;
        }

        deleteTempFile();

        completeCipherTextProgramPath = jfilechooser.getSelectedFile().getAbsolutePath();
        FileWriter writer = null;
        try {
            // write to file the data in text area
            clearTextFileName = file.getName();
            completeClearTextProgramPath = clearTextFolderPath + clearTextFileName;

                System.out.println("patttttyyyyysssss=="+completeClearTextProgramPath);

            writer = new FileWriter(completeClearTextProgramPath);
            taProgramArea.write(writer);
            writer.close();

            //Encrypting the source code and saving to the path as specified by the user
            objEncryptionManager.encryptSource(completeClearTextProgramPath, completeCipherTextProgramPath);

            setTitle(file.getName());
            strOldProgram = taProgramArea.getText();
        } catch (IOException e) {
            saveFlag = false;
            JOptionPane.showMessageDialog(this, "File Not Saved", "Error", JOptionPane.ERROR_MESSAGE);

        } finally {
            if (writer != null) {
                try {
                    //close writer object
                    writer.close();
                } catch (IOException ie) {
                }
            }
        }
        if (saveFlag) {
            //Insert record of the saved file into the database
            // WhenEver a new File is Saved by Using save or a already saved file is saved by  SaveAs
            ProgramMasterBean objBean = new ProgramMasterBean();
            objBean.setUser_ID(loggedInUserId);
            objBean.setProgram_Name(clearTextFileName);
            objBean.setProgram_Path(completeCipherTextProgramPath);


            objBean.setCreate_Date(generateCurrentTime());

            DBOperations objDB = new DBOperations();
            currentProgramId = objDB.insertSavedProgramDetail(objBean);
        }
    }
    }
    void openFile() {
    int state= jfilechooser.showOpenDialog(this);
        //get path of file selected including filename
    if(state==JFileChooser.APPROVE_OPTION)
    {
        taOutput.setText(" ");
    miRun.setEnabled(false);
        try {

            deleteTempFile();

            completeCipherTextProgramPath = jfilechooser.getSelectedFile().getAbsolutePath();
            File f = new File(completeCipherTextProgramPath);
            clearTextFileName = f.getName();

            completeClearTextProgramPath = clearTextFolderPath + clearTextFileName;

            System.out.println("patttttyyyyyoooo=="+completeClearTextProgramPath);

            //this method call will decrypt the source code and save the file by the name stored in variable clearTextFileName
            objEncryptionManager.decryptSource(completeClearTextProgramPath, completeCipherTextProgramPath);


            System.out.println("hell0   " + String.valueOf(jfilechooser.getSelectedFile().getAbsolutePath()));
            setTitle(clearTextFileName);

            //To Display the File Decrypted file in textarea
            File fileClearText = new File(completeClearTextProgramPath);
            FileReader fileReader = new FileReader(fileClearText);
            BufferedReader br = new BufferedReader(fileReader);
            String completeF = "";
            String line;
            while ((line = br.readLine()) != null) {
                completeF += line + "\n";
            }
            taProgramArea.setText(completeF);
          
            strOldProgram = completeF;
            fileReader.close();
            br.close();
        } catch (IOException e) {


            System.out.println("in open=="+e);
            JOptionPane.showMessageDialog(this, "File Not Open", "Error", JOptionPane.ERROR_MESSAGE);
        }

    

        DBOperations objDB = new DBOperations();

        System.out.println("pathh----===="+completeCipherTextProgramPath);
        ProgramMasterBean objProgramBean = objDB.getSavedProgramDetailByPath(completeCipherTextProgramPath);


        System.out.println("    id==="+objProgramBean.getProgram_ID());
        if (objProgramBean.getProgram_ID() == -1) {
            taProgramArea.setText("");
            setTitle("Untitled");
            JOptionPane.showMessageDialog(null, "Selected program format not supported by the IDE");

            taProgramArea.setEditable(false);
            miSave.setEnabled(false);
            miSaveAs.setEnabled(false);
        } else {
            if (loggedInUserId != objProgramBean.getUser_ID()) {
                taProgramArea.setEditable(false);
                miSave.setEnabled(false);
                miSaveAs.setEnabled(false);
            } else {
                taProgramArea.setEditable(true);
                miSave.setEnabled(true);
                miSaveAs.setEnabled(true);
            }

            currentProgramId = objProgramBean.getProgram_ID();
            ProgramAccessMasterBean objAccessBean = new ProgramAccessMasterBean();
            objAccessBean.setProgram_ID(objProgramBean.getProgram_ID());
            objAccessBean.setUser_ID(loggedInUserId);
            objAccessBean.setAccess_Date(generateCurrentTime());
            objDB.insertAccessedProgramDetail(objAccessBean);

        }


    }
    }

    void deleteTempFile() {
        if (!clearTextFileName.equals("")) {
            try {
                File f = new File(completeClearTextProgramPath);
                f.delete();
            } catch (Exception e) {
            }


        }
    }



     void logout() {
        DBOperations objDB = new DBOperations();
        objDB.updateUserActivity(MainFrame.userActivityID);
        deleteTempFile();
        System.exit(0);

    }


    public void windowOpened(WindowEvent e) {
       // throw new UnsupportedOperationException("Not supported yet.");
    }

    public void windowClosing(WindowEvent e) {
       // throw new UnsupportedOperationException("Not supported yet.");
        logout();
    }

    public void windowClosed(WindowEvent e) {
        //throw new UnsupportedOperationException("Not supported yet.");
    }

    public void windowIconified(WindowEvent e) {
      //  throw new UnsupportedOperationException("Not supported yet.");
    }

    public void windowDeiconified(WindowEvent e) {
     //   throw new UnsupportedOperationException("Not supported yet.");
    }

    public void windowActivated(WindowEvent e) {
      //  throw new UnsupportedOperationException("Not supported yet.");
    }

    public void windowDeactivated(WindowEvent e) {
        //throw new UnsupportedOperationException("Not supported yet.");
    }

    //class to show errors occured during run time in output textarea
    class ErrorHandler implements Runnable {

        InputStream err;
        IDE r;
        String line;

        ErrorHandler(InputStream err, IDE r) {
            this.err = err;
            this.r = r;
        }

        public void run() {
            try {

                BufferedReader br1 = new BufferedReader(new InputStreamReader(err));
                while ((line = br1.readLine()) != null) {
                    taOutput.setText(line);
                }

            } catch (Exception e) {
            }
        }
    }

    //class to show output occured during run time in output textarea
    class InputHandler implements Runnable {

        InputStream inp;
        IDE r;
        String line;
        String msg = "";
        int count = 1;

        InputHandler(InputStream inp, IDE r) {
            this.inp = inp;
            this.r = r;
        }

        public void run() {
            try {
                BufferedReader br1 = new BufferedReader(new InputStreamReader(inp));
                while ((line = br1.readLine()) != null) {
                    //msg += count + " :" + line + "\n";
                    msg += line + "\n";
                    count++;
                    taOutput.setText(msg);
                }
            } catch (Exception e) {
            }

        }
    }

    public String generateCurrentTime() {
        java.util.Date dd = new java.util.Date();
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy.MM.dd HH:mm:ss");
        String strDate = sdf.format(dd);
        return strDate;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new IDE().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JMenu menuExecute;
    private javax.swing.JMenu menuFile;
    private javax.swing.JMenuItem miCompile;
    private javax.swing.JMenuItem miExit;
    private javax.swing.JMenuItem miNew;
    private javax.swing.JMenuItem miOpen;
    private javax.swing.JMenuItem miRun;
    private javax.swing.JMenuItem miSave;
    private javax.swing.JMenuItem miSaveAs;
    private javax.swing.JSplitPane splitPane;
    private javax.swing.JTextArea taOutput;
    private javax.swing.JTextArea taProgramArea;
    // End of variables declaration//GEN-END:variables
}
